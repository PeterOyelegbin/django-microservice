name: Deploy Django Celery App

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: django-celery-repo
  DOCKER_IMAGE: django-celery-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: |
        python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        if [[ -z "$ECR_REGISTRY" ]]; then
          echo "Error: ECR_REGISTRY is not set. Check AWS credentials and permissions."
          exit 1
        fi
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder'
    - name: Configure AWS Credentials on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          mkdir -p ~/.aws
          cat << 'EOF' > ~/.aws/config
          [default]
          region = ${{ env.AWS_REGION  }}
          output = json
          EOF
          
          cat << 'EOF' > ~/.aws/credentials
          [default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY}}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_KEY }}
          EOF
          
          chmod 600 ~/.aws/credentials
          aws sts get-caller-identity  # Verify credentials
    - name: Prepare deployment files
      run: |
        # Get ECR repository URL from previous step
        ECR_URL="${{ steps.build-image.outputs.image }}"

        # Create production docker-compose file with the actual image URL
        echo "Creating docker-compose.yml..."
        cat << EOF > docker-compose.prod.yml
        version: '3.8'

        services:
          redis:
            image: redis:alpine
            ports:
              - "6379:6379"
            volumes:
              - redis_data:/data

          worker:
            image: ${ECR_URL}
            command: celery -A core worker -l INFO
            environment:
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis

          web:
            image: ${ECR_URL}
            command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
            ports:
              - "8000:8000"
            environment:
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis
              - db
          
          db:
            image: postgres:13-alpine
            environment:
              POSTGRES_DB: ${{ vars.DB_NAME }}
              POSTGRES_USER: ${{ vars.DB_USER }}
              POSTGRES_PASSWORD: ${{ vars.DB_PASS }}
            ports:
              - "5432:5432"
            volumes:
              - postgres_data:/var/lib/postgresql/data/

        volumes:
          redis_data:
          postgres_data:
        EOF

        # Create deployment script
        cat << 'EOF' > deploy.sh
        #!/bin/bash
        set -ex
        
        # Verify AWS credentials
        aws sts get-caller-identity
        
        # Login to ECR
        AWS_REGION=$(echo ${FULL_ECR_IMAGE} | cut -d'.' -f4)
        ECR_REGISTRY=$(echo ${FULL_ECR_IMAGE} | cut -d'/' -f1)
        aws ecr get-login-password --region ${AWS_REGION} | \
          docker login --username AWS --password-stdin ${ECR_REGISTRY}
        
        # Deploy
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml down || true
        docker-compose -f docker-compose.prod.yml up -d
        docker ps
        EOF
        chmod +x deploy.sh
    - name: Copy files to EC2
      run: |
        scp -o StrictHostKeyChecking=no \
            docker-compose.prod.yml \
            deploy.sh \
            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/
    - name: Deploy to EC2
      run: |
        # Get the exact image name from build step
        FULL_IMAGE_URI="${{ steps.build-image.outputs.image }}"
        
        # Verify the image URI is populated
        echo "Image URI: ${FULL_IMAGE_URI}"
        
        # SSH and deploy
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} \
          "cd /home/ubuntu/app && \
          echo 'FULL_ECR_IMAGE=${FULL_IMAGE_URI}' > .env && \
          echo 'AWS_REGION=us-east-1' >> .env && \
          cat .env && \
          ./deploy.sh"
          
