name: Deploy Django Celery App to Docker Hub

on:
  push:
    branches: [ main ]

env:
  DOCKER_HUB_REPOSITORY: peteroyelegbin/django-celery-app
  DOCKER_IMAGE_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: |
        python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      ecr-image-url: ${{ steps.build-image.outputs.ecr_image_url }}
    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }} .
        docker push ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
        echo "image=${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder'
    - name: Prepare deployment files
      run: |
        # Create production docker-compose file
        echo "Creating docker-compose.yml..."
        cat << EOF > docker-compose.prod.yml
        version: '3.8'

        services:
          redis:
            image: redis:alpine
            ports:
              - "6379:6379"
            volumes:
              - redis_data:/data

          worker:
            image: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
            command: celery -A core worker -l INFO
            environment:
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis

          web:
            image: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
            command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
            ports:
              - "8000:8000"
            environment:
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis
              - db
          
          db:
            image: postgres:13-alpine
            environment:
              POSTGRES_DB: ${{ vars.DB_NAME }}
              POSTGRES_USER: ${{ vars.DB_USER }}
              POSTGRES_PASSWORD: ${{ vars.DB_PASS }}
            ports:
              - "5432:5432"
            volumes:
              - postgres_data:/var/lib/postgresql/data/

        volumes:
          redis_data:
          postgres_data:
        EOF

        # Create deployment script
        cat << 'EOF' > deploy.sh
        #!/bin/bash
        set -ex
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml down || true
        docker-compose -f docker-compose.prod.yml up -d

        sleep 10

        docker-compose -f docker-compose.prod.yml exec web python manage.py migrate --noinput
        
        docker ps
        EOF
        chmod +x deploy.sh

    - name: Copy files to EC2
      run: |
        FULL_IMAGE_URI="${{ needs.build-and-push.outputs.ecr-image-url }}"
        echo "Copying files with image URI: ${FULL_IMAGE_URI}"
        
        scp -o StrictHostKeyChecking=no \
            docker-compose.prod.yml \
            deploy.sh \
            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/
    - name: Execute deployment
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} \
          "cd /home/ubuntu/app && \
          ./deploy.sh"
