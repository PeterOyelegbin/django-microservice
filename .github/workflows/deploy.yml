name: Deploy Django Celery App

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: django-celery-repo
  DOCKER_IMAGE: django-celery-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: |
        python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
    - name: Copy files to EC2
      run: |
        # Create necessary files locally
        echo "Creating docker-compose.yml..."
        cat << 'EOL' > docker-compose.prod.yml
        version: '3.8'

        services:
          redis:
            image: redis:alpine
            ports:
              - "6379:6379"
            volumes:
              - redis_data:/data

          worker:
            build: .
            command: celery -A core worker -l INFO
            environment:
              - REDIS_URL=${REDIS_URL}
            depends_on:
              - redis

          web:
            build: .
            command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
            ports:
              - "8000:8000"
            environment:
              - REDIS_URL=${REDIS_URL}
            depends_on:
              - redis
              - db
          
          db:
            image: postgres:13-alpine
            environment:
              POSTGRES_DB: ${DB_NAME}
              POSTGRES_USER: ${DB_USER}
              POSTGRES_PASSWORD: ${DB_PASS}
            ports:
              - "5432:5432"
            volumes:
              - postgres_data:/var/lib/postgresql/data/

        volumes:
          redis_data:
          postgres_data:
        EOL
        
        # Copy files using SCP
        scp -o StrictHostKeyChecking=no \
            -r ./* ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/
    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
        set -ex
        cd /home/ubuntu/app
        
        # Login to ECR
        aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin ${{ steps.build-image.outputs.ecr_repository_url }}
        
        # Pull the latest image
        docker pull ${{ steps.build-image.outputs.image }}
        
        # Stop and remove existing containers
        docker-compose -f docker-compose.prod.yml down || true
        
        # Run new containers
        docker-compose -f docker-compose.prod.yml up -d
        
        # Verify containers are running
        docker ps
        EOF
        